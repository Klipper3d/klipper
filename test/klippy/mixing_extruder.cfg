# Config for extruder testing
[stepper_x]
step_pin: PF0
dir_pin: PF1
enable_pin: !PD7
microsteps: 16
rotation_distance: 40
endstop_pin: ^PE5
position_endstop: 0
position_max: 200
homing_speed: 50

[stepper_y]
step_pin: PF6
dir_pin: !PF7
enable_pin: !PF2
microsteps: 16
rotation_distance: 40
endstop_pin: ^PJ1
position_endstop: 0
position_max: 200
homing_speed: 50

[stepper_z]
step_pin: PL3
dir_pin: PL1
enable_pin: !PK0
microsteps: 16
rotation_distance: 8
endstop_pin: ^PD3
position_endstop: 0.5
position_max: 200

[extruder]
step_pin: PA4
dir_pin: PA6
enable_pin: !PA2
microsteps: 16
rotation_distance: 32
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PB4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK5
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 210

[extruder_stepper extruder1]
extruder: #extruder
step_pin: PH5
dir_pin: PH6
enable_pin: !PB5
microsteps: 16
rotation_distance: 32

[extruder_stepper extruder2]
extruder: #extruder
step_pin: PH3
dir_pin: PH4
enable_pin: !PB6
microsteps: 16
rotation_distance: 32

[mixing_extruder]
steppers: extruder,extruder1,extruder2

[mcu]
serial: /dev/ttyACM0

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100


[gcode_macro M163]
description:
    Set a single mix factor (in proportion to the sum total of all mix
    factors). The mix must be committed to a virtual tool by M164 before
    it takes effect.
variable_factor_0: 0
variable_factor_1: 0
variable_factor_2: 0
gcode:
    SET_GCODE_VARIABLE MACRO=M163 VARIABLE=factor_{params.S|int} VALUE={params.P}

[gcode_macro M164]
description:
    Save the factors set with M163 to the given virtual extruder. The virtual
    extruder 0 is the currently active extruder.
variable_virtual_mix_1: 0,0,0
variable_virtual_mix_2: 0,0,0
variable_virtual_mix_3: 0,0,0
variable_virtual_mix_4: 0,0,0
variable_virtual_mix_5: 0,0,0
variable_virtual_mix_6: 0,0,0
variable_virtual_mix_7: 0,0,0
variable_virtual_mix_8: 0,0,0
variable_virtual_mix_9: 0,0,0
gcode:
    {% set factors = printer["gcode_macro M163"] %}
    {% if params.S|default(0)|int > 0 %}
      SET_GCODE_VARIABLE MACRO=M164 VARIABLE=virtual_mix_{params.S|int|default(0)} VALUE={factors.factor_0},{factors.factor_1},{factors.factor_2}
    {% else %}
      SET_MIXING_EXTRUDER FACTORS={factors.factor_0}:{factors.factor_1}:{factors.factor_2} ENABLE=1
    {% endif %}

[gcode_macro M165]
description:
    Set the mix for the active virtual extruder all at once. Any factors
    left out are set to 0.0. The factors can either be defined by A,B,C
    directly defining the factors, by selecting a preset via P or loading
    a previous set virtual extruder with M164.
gcode:
    {% set idx = params.S|default(0)|int %}
    {% set preset = params.P|default(-1)|int %}
    {% if idx > 0 %}
      {% set mix = printer["gcode_macro M164"] %}
      SET_MIXING_EXTRUDER FACTORS={mix['virtual_mix_%d'%(idx)][0]}:{mix['virtual_mix_%d'%(idx)][1]}:{mix['virtual_mix_%d'%(idx)][2]} ENABLE=1
    {% elif preset >= 0 %}
      SET_MIXING_EXTRUDER PRESET={preset} ENABLE=1
    {% else %}
      SET_MIXING_EXTRUDER FACTORS={params.A|default(0)|float}:{params.B|default(0)|float}}:{params.C|default(0)|float}} ENABLE=1
    {% endif %}

[gcode_macro M166]
description:
gcode:
    {% set start_height = params.A|float %}
    {% set end_height = params.Z|float %}
    {% set start_extruder = params.I|int %}
    {% set end_extruder = params.J|int %}
    {% set enable = params.S|default(RESET) %}
    {% if start_height > 0 and end_height > 0 and start_extruder >= 0 and end_extruder >= 0 %}
      ADD_MIXING_GRADIENT START_HEIGHT={start_height} END_HEIGHT={end_height} START={start_extruder} END={end_extruder}
      SET_MIXING_GRADIENT ENABLE={enable}
    {% elif enable != "RESET" %}
      SET_MIXING_GRADIENT ENABLE={enable}
    {% else %}
      RESET_MIXING_GRADIENT
    {% endif %}

[gcode_macro M567]
description:
    Set the mix for the active virtual extruder all at once. Any factors
    left out are set to 0.0. The factors are provided colon separated with
    the parameter E.
gcode:
    {% set weights = ((params.E|default("1:0:0"))+":0:0").split(":") %}
    SET_MIXING_EXTRUDER FACTORS={weights[0]}:{weights[1]}:{weights[2]} ENABLE=1

[gcode_macro G1]
description:
    Extends the std G1 g-code by allowing to specify the different extrusion
    length colon separated in the E parameter. Only makes sense with all
    positive or all negative extrusion lengths and the lengths are interpreted
    as relative extrusions.
rename_existing: G1.1
gcode:
    {% set xyzf = ("X%s Y%s Z%s F%s "%(params.X, params.Y, params.Z, params.F)).replace("X ", "").replace("Y ", "").replace("Z ", "").replace("F ", "") %}
    {% if (params.E|default("!")).find("!") >= 0 %}
      G1.1 {xyzf}
    {% elif (params.E|default("0")).find(":") < 0 %}
      G1.1 {xyzf} E{params.E|default("0")}
    {% else %}
      {% set weights = ((params.E|default("0:0:0"))+":0:0").split(":") %}
      {% set e_sum = weights[0]|float+weights[1]|float+weights[2]|float %}
      SET_MIXING_EXTRUDER FACTORS={weights[0]|float/e_sum}:{weights[1]|float/e_sum}:{weights[2]|float/e_sum} ENABLE=1
      SAVE_GCODE_STATE NAME=_mixing_g1_state
      M83
      G1.1 {xyzf} E{e_sum}
      RESTORE_GCODE_STATE NAME=_mixing_g1_state
    {% endif %}

[gcode_macro G10]
gcode:
    {% set retract_length = printer['firmware_retraction'].retract_length %}
    {% set retract_speed = printer['firmware_retraction'].retract_length %}
    SAVE_GCODE_STATE NAME=_mixing_retract_state
    M83
    G1 E{-(retract_length|float)/3}:{-(retract_length|float)/3}}:{-(retract_length|float)/3}} F{retract_speed|float}
    RESTORE_GCODE_STATE NAME=_mixing_retract_state

[gcode_macro G11]
gcode:
    {% set retract_length = printer['firmware_retraction'].retract_length %}
    {% set retract_speed = printer['firmware_retraction'].retract_length %}
    SAVE_GCODE_STATE NAME=_mixing_retract_state
    M83
    G1 E{(retract_length|float)/3}:{(retract_length|float)/3}}:{(retract_length|float)/3}} F{retract_speed|float}
    RESTORE_GCODE_STATE NAME=_mixing_retract_state


[gcode_macro Check_Mixing]
gcode:
    {% set mixing = printer['mixing_extruder'].mixing.split(",") %}
    {% set pos_A = params.A|default("x") %}
    {% set pos_B = params.B|default("x") %}
    {% set pos_C = params.C|default("x") %}
    {% if pos_A != "x" %}
      {% if mixing[0] == pos_A %}
        {action_respond_info("Mixing A matches expectation %s"%(pos_A))}
      {% else %}
        {action_raise_error("Wrong A mixing %s/%s"%(mixing[0], pos_A))}
      {% endif %}
    {% endif %}
    {% if pos_B != "x" %}
      {% if mixing[1] == pos_B %}
        {action_respond_info("Mixing B matches expectation %s"%(pos_B))}
      {% else %}
        {action_raise_error("Wrong B mixing %s/%s"%(mixing[1], pos_B))}
      {% endif %}
    {% endif %}
    {% if pos_C != "x" %}
      {% if mixing[2] == pos_C %}
        {action_respond_info("Mixing C matches expectation %s"%(pos_C))}
      {% else %}
        {action_raise_error("Wrong C mixing %s/%s"%(mixing[2], pos_C))}
      {% endif %}
    {% endif %}


[gcode_macro Check_Stepper_Pos]
gcode:
    {% set ticks = printer['mixing_extruder'].ticks.split(",") %}
    {% set pos_A = params.A|default("x") %}
    {% set pos_B = params.B|default("x") %}
    {% set pos_C = params.C|default("x") %}
    {% if pos_A != "x" %}
      {% if ticks[0] == pos_A %}
        {action_respond_info("Position A matches expectation %s"%(pos_A))}
      {% else %}
        {action_raise_error("Wrong A position %s/%s"%(ticks[0], pos_A))}
      {% endif %}
    {% endif %}
    {% if pos_B != "x" %}
      {% if ticks[1] == pos_B %}
        {action_respond_info("Position B matches expectation %s"%(pos_B))}
      {% else %}
        {action_raise_error("Wrong B position %s/%s"%(ticks[1], pos_B))}
      {% endif %}
    {% endif %}
    {% if pos_C != "x" %}
      {% if ticks[2] == pos_C %}
        {action_respond_info("Position C matches expectation %s"%(pos_C))}
      {% else %}
        {action_raise_error("Wrong C position %s/%s"%(ticks[2], pos_C))}
      {% endif %}
    {% endif %}
