# This file contains pin mappings for the stock Anycubic Kobra (Trigorilla V1.0.4)
# To use this config, during "make menuconfig" select the HC32F460 architecture
# and communication interface to serial on PA3 and PA2.
# Make sure the clock is set to 200MHz.

# Note that the "make flash" command does not work with this board.
# After running "make", rename the out/klipper.bin file to out/firmware.bin
# Copy the file out/firmware.bin to an SD card formatted to FAT32, with an
# MBR partition table. Then restart the printer with the SD card inserted.

# See docs/Config_Reference.md for a description of parameters.

# Core
[include mainsail.cfg]

[virtual_sdcard]
path: ~/printer_data/gcodes # Your g code installation path
on_error_gcode: CANCEL_PRINT

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2000
max_z_velocity: 20
max_z_accel: 1000

# ------ MOTORS & HEATERS ------

[stepper_x]
step_pin: PA5
dir_pin: PA4
enable_pin: !PC3
microsteps: 128
rotation_distance: 40
position_endstop: -38
position_min: -38
position_max: 229
homing_speed: 50
endstop_pin: tmc2209_stepper_x:virtual_endstop
homing_retract_dist: 0
 
[tmc2209 stepper_x]
uart_pin: PA15
#tx_pin: PA9
uart_address: 3
#select_pins: !PB4
diag_pin: PA6
driver_SGTHRS: 80
run_current: 0.9
stealthchop_threshold: 999999
interpolate: false
 
[stepper_y]
step_pin: PC4
dir_pin: PA7
enable_pin: !PC3
microsteps: 128
rotation_distance: 40
position_endstop: 0
position_min: 0
position_max: 229
homing_speed: 50
endstop_pin: tmc2209_stepper_y:virtual_endstop
homing_retract_dist: 0
 
[tmc2209 stepper_y]
uart_pin: PA15
#tx_pin: PA9
#select_pins: !PB4
uart_address: 1
run_current: 0.6
diag_pin: ^PC5      # Set to MCU pin connected to TMC DIAG pin
driver_SGTHRS: 80 # 255 is most sensitive value, 0 is least sensitive
stealthchop_threshold: 999999
interpolate: false

[stepper_z]
step_pin: PC7
dir_pin: !PC6
enable_pin: !PC3
microsteps: 128
rotation_distance: 4
endstop_pin: probe:z_virtual_endstop
#endstop_pin: PB8
#position_endstop: 1.35
position_min: -5
position_max: 250
homing_speed: 10
second_homing_speed:1
homing_retract_dist: 2.3
 
[tmc2209 stepper_z]
uart_pin: PA15
#tx_pin: PA9
#select_pins: !PB4
uart_address: 2
run_current: 0.6
diag_pin: ^PA8      # Set to MCU pin connected to TMC DIAG pin
driver_SGTHRS: 50  # 255 is most sensitive value, 0 is least sensitive
stealthchop_threshold: 999999
interpolate: false
 
[extruder]
max_extrude_cross_section: 50.0 
max_extrude_only_distance: 1500
step_pin: PC14
dir_pin: PC15
enable_pin: !PC3
microsteps: 64
# rotation_distance: 8.204
# Formula: rotation distance = <previous_rotation distance> * <actual_extrude_distance> / <requested_extrude_distance>
# actual_extrude_distance = 120 - 28 = 92
# rotation_distance = 6.312978 * 92 / 100 = 5.80793976
rotation_distance: 7.794750
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
# sensor_type: EPCOS 100K B57560G104F #Might need adjustment, i have new temp sensor along with V6 heatblock and heatbreak.
sensor_type: Generic 3950
sensor_pin: PC1
pressure_advance: 0.045
# control: pid
# tuned for stock hardware with 200 degree Celsius target
# pid_Kp: 21.527
# pid_Ki: 1.063
# pid_Kd: 108.982
min_temp: 0
min_extrude_temp: 0
max_temp: 260 #Stock is 250

[tmc2208 extruder]
uart_pin: PA15
run_current: 0.7
stealthchop_threshold: 999999
#interpolate: false

[verify_heater extruder]
max_error: 120
check_gain_time:30
hysteresis: 10
heating_gain: 2

[heater_bed]
heater_pin: PA0
# sensor_type: EPCOS 100K B57560G104F
sensor_type: Generic 3950
sensor_pin: PC0
# control: pid
# tuned for stock hardware with 50 degree Celsius target
# pid_Kp: 54.027
# pid_Ki: 0.770
# pid_Kd: 948.182
min_temp: 0
max_temp: 130

[verify_heater heater_bed]
max_error: 120
check_gain_time:120
hysteresis: 10
heating_gain: 2

# ------ MOTORS & HEATERS ------

# ------ HOMING & PROBE & BED MESH ------

[safe_z_home]
home_xy_position: 111, 111
speed: 100
z_hop: 5               # Move up 5mm
z_hop_speed: 5

[probe]
pin: PB8
x_offset: 43.5
y_offset: 4.7
#z_offset: 1.810
samples: 2
samples_result: average
samples_tolerance: 0.05
samples_tolerance_retries: 5
sample_retract_dist: 0.5
speed:1
lift_speed:5

[bed_mesh]
speed: 100
horizontal_move_z: 10
mesh_min: 19, 19
mesh_max: 210, 210
probe_count: 9, 9
algorithm:bicubic
bicubic_tension:0.2
mesh_pps : 2, 2
fade_start: 1
fade_end: 10

# ------ BED MESH & PROBE & HOMING ------

# ------ FANS & GPIO ------
 
[controller_fan controller_fan]
pin: PA14
fan_speed: 0.5
 
[heater_fan extruder_fan]
pin: PA13
heater_temp: 65.0
 
[fan]
pin: PB9

# ------ FANS & GPIO ------

# ------ GCODE MACROS ------

[display_status]

[pause_resume]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                     ; z hop amount
    ##### set park positon for x and y #####
    # default is your max position from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    
    {% if printer['pause_resume'].is_paused|int == 0 %}
          SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
          SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
          SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
          BASE_PAUSE                                                                           ; pause print
          {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
              G91                                                                              ; relative positioning
              G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
              { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
          G90                                                                                  ; absolute positioning
        G1 X{x_park} Y{y_park} F3000 ; park toolhead at front center
          SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
          # M104 S0                                                                            ; turn off hotend
          SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
  BED_MESH_PROFILE LOAD=default


# ------ GCODE MACROS ------

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 1.895
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 61.685
#*# pid_ki = 1.297
#*# pid_kd = 733.282
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 14.903
#*# pid_ki = 0.613
#*# pid_kd = 90.537
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.298164, -0.225586, -0.117031, -0.019062, 0.043672, 0.167344, 0.245039, 0.309375, 0.390352
#*# 	  -0.206484, -0.144102, -0.034492, 0.052891, 0.109375, 0.224883, 0.300195, 0.350313, 0.421016
#*# 	  -0.264609, -0.200273, -0.092539, -0.006992, 0.051445, 0.173828, 0.238008, 0.290000, 0.362266
#*# 	  -0.357305, -0.294102, -0.182344, -0.096992, -0.038633, 0.080469, 0.148867, 0.205156, 0.276641
#*# 	  -0.351602, -0.292461, -0.188906, -0.104648, -0.060469, 0.056523, 0.122539, 0.182031, 0.244805
#*# 	  -0.440469, -0.376055, -0.256055, -0.165859, -0.113008, 0.001211, 0.076094, 0.147305, 0.229570
#*# 	  -0.506680, -0.437852, -0.322227, -0.230742, -0.175078, -0.055352, 0.022305, 0.095273, 0.182344
#*# 	  -0.538320, -0.484648, -0.367266, -0.271094, -0.211641, -0.091289, -0.014414, 0.056172, 0.147695
#*# 	  -0.585625, -0.524961, -0.408633, -0.303711, -0.239023, -0.110937, -0.028047, 0.053477, 0.159180
#*# x_count = 9
#*# y_count = 9
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 19.0
#*# max_x = 209.96
#*# min_y = 19.0
#*# max_y = 209.96000000000004
